# IN GENERAL TIME IS IN SECONDS AND SIZE IN MBs UNLESS OTHERWISE SPECIFIED e.g. same_city_latency_ms, same_city_dev_ms ...
simulation:
  init_CP: "FBA" # the protocol used by the simulator
  simTime: 300 # stop similation after simTime seconds have been simulated (01 to ignore)
  stop_after_blocks: 100 # stop simulation after stop_after_blocks blocks have been produced (-1 to ignore)
  debugging_mode: False # turns on debugging mode
  remove_timeouts: False # removes timeout events from the event queue after a new round (less efficient but usefull for debugging)
  print_info: True # print information about the simulation at the start of execution

application:
  Nn: 4 # number of block producing nodes to simulate 
  TI_dur: 25  # transaction generation (and general) update interval
  Tn: 100 # number of transaction produced per second
  base_transation_size: 0 # the base size of each transactions
  Tsize: 0.001 # the average size of a transaction (exponential distribution)
  Faulty_nodes: 1   #The number of nodes that can fail
  Byzantine_nodes: 0    #The number of malicious nodes

execution:
  creation_time: 0.1 # block creation delay
  block_val_delay: 0.025 # block validation delay
  msg_val_delay: 0.01 # message validation delay
  sync_message_request_delay: 1 # how long a sync message takes to arrive
  proposer_selection: "round_robin" # proposer selection algorithm (round_robin, hash)

data:
  Bsize: 1 # maximum block size
  base_block_size: 0 # base size of a block
  block_interval: 0 # minimun time between two consecutive blocks

network:
  base_msg_size: 0.01 # size of base message (before any data is added) (MB)
  gossip: False # use a gossip protocol (BROKEN AT THE MOMENT)
  num_neighbours: 3 # how many neighbours per node (gossip and FastSync)
  use_latency: distance # how to calculate the netwrok latency between two nodes (meassured, distance, local, off)
  same_city_latency_ms: 10 # used for local and for nodes in the same city
  same_city_dev_ms: 0 # deviation of same city latency
  queueing_delay: 0 # models a queueing delay
  processing_delay: 0 # models a processing delay

  bandwidth: # distribution variables used to generate the badnwidth for each node (normal)
    mean: 10 # MB/s
    dev: 0 # MB/s
    min: 2 # minimum allowed bandwidth (MB/s)

# paths to files contained parameters specific to implemented conseussu protocols
consensus:
  BigFoot: Chain/Consensus/BigFoot/BigFoot_config.yaml
  PBFT: Chain/Consensus/PBFT/PBFT_config.yaml
  FBA: Chain/Consensus/FBA/FBA_config.yaml

# behaviour of byzantine and faulty nodes
behaviour:
  behaviour_interval: 10

  byzantine_nodes:
    # percent of nodes that will be byzantine
    # (percentange based on how many faulty nodes the network can tolerate)
    num_byzantine: 0
  sync:
    # define the chance a byzantine node will send bad sync data 
    # (and the delay that will cause)
    bad_data: 
      delay: 10
    # define the chance a byzantine node will not responde to a sync message
    # (and the delay that will cause) 
    no_response: 
      delay: 5
    probs:
      low: 5
      high: 20

  crash_probs:
    # percent of nodes that can crash (go offiline)
    # (based on the number of faulty nodes that the CP can tolerate) 
    faulty_nodes: 0
    # probabilities for crash
    mean_fault_time: 
      low: 30
      high: 60
    # how long for the node to recover
    mean_recovery_time: 
      low: 10
      high: 60